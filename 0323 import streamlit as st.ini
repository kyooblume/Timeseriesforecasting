import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import xgboost as xgb
from sklearn.metrics import mean_absolute_percentage_error

# Streamlit アプリのタイトル
st.title("📊 時系列予測")

# データのセッション状態を初期化（初回起動時）
if "df" not in st.session_state:
    st.session_state["df"] = None

# サイドバーにフェーズ選択のセレクトボックスを追加
phase = st.sidebar.selectbox("フェーズを選択してください", ["1.データのアップロード", "2.データ型の変更", "3.分析"])

if phase == "1.データのアップロード":
    st.write("### データのアップロード")
    uploaded_file = st.file_uploader("ファイルをアップロード", type=["csv", "xlsx", "txt", "json"])

    if uploaded_file is not None:
        file_extension = uploaded_file.name.split(".")[-1]

        try:
            if file_extension == "csv":
                df = pd.read_csv(uploaded_file, encoding="utf-8-sig")
            elif file_extension == "xlsx":
                xls = pd.ExcelFile(uploaded_file)
                sheet_name = st.selectbox("シートを選択してください", xls.sheet_names)
                df = pd.read_excel(uploaded_file, sheet_name=sheet_name)
            elif file_extension == "txt":
                delimiter = st.selectbox("区切り文字を選択してください", ["\t", " "])
                df = pd.read_csv(uploaded_file, delimiter=delimiter, encoding="utf-8-sig")
            elif file_extension == "json":
                df = pd.read_json(uploaded_file)
            else:
                st.error("対応していないファイル形式です。")
                st.stop()

            # 読み込んだデータをセッションに保存
            st.session_state["df"] = df
            st.success("✅ データの読み込み成功！")
        except Exception as e:
            st.error(f"❌ データの読み込みに失敗しました: {e}")

elif phase == "2.データ型の変更":
    st.subheader("データ型の変更")
    st.write("基本的には無視してください")
    df = st.session_state.get("df")

    if df is not None:
        for column in df.columns:
            dtype = st.selectbox(f"{column} のデータ型を選択してください", ["自動検出", "整数", "浮動小数点数", "文字列", "日付", "バイナリ"], key=column)
            if dtype == "整数":
                df[column] = pd.to_numeric(df[column], errors="coerce").astype("Int64")
            elif dtype == "浮動小数点数":
                df[column] = pd.to_numeric(df[column], errors="coerce")
            elif dtype == "文字列":
                df[column] = df[column].astype(str)
            elif dtype == "日付":
                df[column] = pd.to_datetime(df[column], errors="coerce")
            elif dtype == "バイナリ":
                df[column] = df[column].astype("bool")

        # 変更後のデータをセッションに保存
        st.session_state["df"] = df
    else:
        st.warning("⚠️ データが読み込まれていません。まずは1でデータをアップロードしてください。")

elif phase == "3.分析":
    df = st.session_state.get("df")

    if df is not None:
        # カテゴリカル変数のOne-Hot-Encoding
        categorical_columns = df.select_dtypes(include=["object", "category"]).columns
        df = pd.get_dummies(df, columns=categorical_columns, drop_first=True)

        numerical_df = df.select_dtypes(include=["number"])
        if not numerical_df.empty:
            selected_variable = st.selectbox("📌 相関を調べる変数を選択", numerical_df.columns.tolist())

            if selected_variable:
                correlation_matrix = numerical_df.corr()
                correlation_series = correlation_matrix[selected_variable].drop(selected_variable).sort_values(ascending=False)
                top_positive = correlation_series.head(5)
                top_negative = correlation_series.tail(5)

                st.subheader(f"📊 {selected_variable} と相関が高い・低い変数")
                col1, col2 = st.columns(2)
                with col1:
                    st.write("🔵 **正の相関が高い5つ**")
                    st.dataframe(top_positive)
                with col2:
                    st.write("🔴 **負の相関が高い5つ**")
                    st.dataframe(top_negative)

                # 可視化
                fig, ax = plt.subplots(figsize=(10, 5))
                colors = ["blue"] * 5 + ["red"] * 5
                top_features = pd.concat([top_positive, top_negative])
                ax.barh(top_features.index[::-1], top_features.values[::-1], color=colors[::-1])
                ax.set_xlabel("Correlation Coefficient")
                ax.set_title(f"Top 5 Positive & Negative Correlations with {selected_variable}")
                ax.axvline(x=0, color="black", linewidth=1)
                st.pyplot(fig)

        if "yyyymmdd" in df.columns:
            df["yyyymmdd"] = pd.to_datetime(df["yyyymmdd"], errors="coerce")
            df = df.dropna(subset=["yyyymmdd"])
            min_date, max_date = df["yyyymmdd"].min(), df["yyyymmdd"].max()

            train_start, train_end = st.date_input("📅 トレーニングデータの期間", value=(min_date, max_date), min_value=min_date, max_value=max_date)
            test_start, test_end = st.date_input("📅 テストデータの期間", value=(max_date, max_date), min_value=min_date, max_value=max_date)

            df_train = df[(df["yyyymmdd"] >= pd.to_datetime(train_start)) & (df["yyyymmdd"] <= pd.to_datetime(train_end))].copy()
            df_test = df[(df["yyyymmdd"] >= pd.to_datetime(test_start)) & (df["yyyymmdd"] <= pd.to_datetime(test_end))].copy()

            selected_variable = st.selectbox("📌 予測する変数を選択", df_train.select_dtypes(include=["number"]).columns.tolist())
            frequency = st.selectbox("データの頻度を選択してください", ["日次", "月次", "年次"])

            def create_time_features(df, selected_variable, freq):
                """日次、月次または年次データの特徴量を作成"""
                df["year"] = df["yyyymmdd"].dt.year
                if freq == "D":  # 日次データ
                    df["month"] = df["yyyymmdd"].dt.month
                    df["day"] = df["yyyymmdd"].dt.day
                    df["dayofweek"] = df["yyyymmdd"].dt.dayofweek
                    df["lag_1"] = df[selected_variable].shift(1)
                    df["lag_7"] = df[selected_variable].shift(7)
                    df["ma_7"] = df[selected_variable].rolling(window=7).mean()
                    df["ma_30"] = df[selected_variable].rolling(window=30).mean()
                elif freq == "M":  # 月次データ
                    df["month"] = df["yyyymmdd"].dt.month
                    df["quarter"] = df["yyyymmdd"].dt.quarter
                    df["lag_1"] = df[selected_variable].shift(1)
                    df["lag_3"] = df[selected_variable].shift(3)
                    df["lag_6"] = df[selected_variable].shift(6)
                    df["lag_12"] = df[selected_variable].shift(12)
                    df["ma_3"] = df[selected_variable].rolling(window=3).mean()
                    df["ma_6"] = df[selected_variable].rolling(window=6).mean()
                    df["ma_12"] = df[selected_variable].rolling(window=12).mean()
                    df["yoy_change"] = df[selected_variable] / df["lag_12"] - 1  # 前年同月比
                elif freq == "Y":  # 年次データ
                    df["lag_1"] = df[selected_variable].shift(1)
                    df["lag_2"] = df[selected_variable].shift(2)
                    df["lag_5"] = df[selected_variable].shift(5)
                    df["lag_10"] = df[selected_variable].shift(10)
                    df["ma_2"] = df[selected_variable].rolling(window=2).mean()
                    df["ma_5"] = df[selected_variable].rolling(window=5).mean()
                    df["ma_10"] = df[selected_variable].rolling(window=10).mean()
                    df["growth_rate"] = df[selected_variable] / df["lag_1"] - 1  # 前年比
                return df.dropna()  # NaNができるので削除

            df_train = create_time_features(df_train, selected_variable, frequency)
            df_test = create_time_features(df_test, selected_variable, frequency)

            if not df_test.empty:
                if frequency == "日次":
                    features = ["year", "month", "day", "dayofweek", "lag_1", "lag_7", "ma_7", "ma_30"]
                elif frequency == "月次":
                    features = ["year", "month", "quarter", "lag_1", "lag_3", "lag_6", "lag_12", "ma_3", "ma_6", "ma_12", "yoy_change"]
                elif frequency == "年次":
                    features = ["year", "lag_1", "lag_2", "lag_5", "lag_10", "ma_2", "ma_5", "ma_10", "growth_rate"]
                X_train, y_train = df_train[features], df_train[selected_variable]
                X_test, y_test = df_test[features], df_test[selected_variable]
                df_train = create_time_features(df_train, selected_variable, frequency)
                df_test = create_time_features(df_test, selected_variable, frequency)

                model = xgb.XGBRegressor(objective="reg:squarederror", n_estimators=100, learning_rate=0.1)
                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)

                st.subheader(f"📈 {selected_variable} の予測結果")

                # テストデータ期間の予実プロット
                fig, ax = plt.subplots(figsize=(12, 6))
                ax.plot(df_test["yyyymmdd"], y_test, label="Actual", marker="o")
                ax.plot(df_test["yyyymmdd"], y_pred, label="Predicted", marker="x")
                plt.xticks(rotation=45)
                plt.legend()
                st.pyplot(fig)

                # 予測データ期間の予測値プロット
                future_dates = pd.date_range(start=df_test["yyyymmdd"].max(), periods=30, freq="D")
                future_df = pd.DataFrame({"yyyymmdd": future_dates})
                future_df = create_time_features(future_df, selected_variable, frequency)
                future_pred = model.predict(future_df[features])

                fig, ax = plt.subplots(figsize=(12, 6))
                ax.plot(future_dates, future_pred, label="Future Prediction", marker="x")
                plt.xticks(rotation=45)
                plt.legend()
                st.pyplot(fig)
                
                # MAPE の計算
                mape = mean_absolute_percentage_error(y_test, y_pred)
                st.write(f"✅ **MAPE**: {mape:.2f} %")

                # MAPE に基づくメッセージの表示
                if mape <= 8.5:
                    st.success("✅ モデル精度は問題ありません。以下ボタンより予測結果をダウンロードください。")

                    df_result = df_test[["yyyymmdd"]].copy()
                    df_result["Actual"] = y_test.values
                    df_result["Predicted"] = y_pred

                    csv = df_result.to_csv(index=False).encode("utf-8")
                    st.download_button(
                        label="📥 予測結果をダウンロード",
                        data=csv,
                        file_name="prediction_results.csv",
                        mime="text/csv",
                    )
                else:
                    st.error("⚠️ モデル精度が不足しています。データを見直してください。")

        else:
            st.warning("⚠️ 'yyyymmdd' カラムが見つかりません。")
    else:
        st.warning("⚠️ データが読み込まれていません。まずは1でデータをアップロードしてください。")

# セッションステートの初期化
if "show_form" not in st.session_state:
    st.session_state["show_form"] = False
if "show_qa" not in st.session_state:
    st.session_state["show_qa"] = False

# サイドバーにボタンを設置
with st.sidebar:
    if st.button("Q&A"):
        st.session_state["show_qa"] = not st.session_state["show_qa"]

    if st.button("質問フォーム"):
        st.session_state["show_form"] = not st.session_state["show_form"]

    # Q&Aセクションを表示（ボタンが押されたときだけ）
    if st.session_state["show_qa"]:
        st.write("### よくある質問")
        st.write("**Q1: アップロードデータの期間の目安は？**")
        st.write("A1: 月次データの場合最低でも 3年分、年次データの場合は最低でも 20年分を推奨します。")
        
        st.write("**Q2: パスワードを忘れた場合は？**")
        st.write("A2: パスワードを忘れた場合は、ログインページの「パスワードを忘れた」リンクから再設定できます。")
        
        st.write("**Q3: お問い合わせ方法は？**")
        st.write("A3: 操作方法がわからない、正しく操作しているはずなのにエラーが出る、モデル精度がどうしても出ないなど、質問・ご相談がある方は以下連絡先に状況をご連絡ください。担当者より返信させていただきます。<br>問い合わせ先メールアドレス：contact@b-mystory.com<br>担当：作田、野本", unsafe_allow_html=True)

    # フォームを表示（ボタンが押されたときだけ）
    if st.session_state["show_form"]:
        st.write("### 質問")
        with st.form("user_form"):
            name = st.text_input("名前")
            email = st.text_input("メールアドレス")
            question = st.text_area("質問内容")
            submitted = st.form_submit_button("送信")

            if submitted:
                st.success(f"送信完了！\n名前: {name}, メール: {email}")










