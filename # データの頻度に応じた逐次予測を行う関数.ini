            # データの頻度に応じた逐次予測を行う関数
            def sequential_forecast(df, model, selected_variable, freq, future_periods):

                """
                データの頻度に応じて逐次予測を行う関数。
                """
                # 逐次予測の準備
                y_train_update = y_train.copy()
                X_future = X_train.iloc[-1:].copy()  # 最後の行を基に未来の特徴量を更新

                for i in range(future_periods):

                    # 特徴量の整合性を確保
                    X_future = align_features(X_train, X_future)

                    # 予測
                    y_pred = model.predict(X_future)
                    y_pred_series = pd.Series(y_pred, index=[X_future.index[0] + i + 1])
                    y_train_update = pd.concat([y_train_update, y_pred_series])

                    # 特徴量を更新
                    if freq == "D":
                        X_future["lag_1"] = y_train_update.iloc[-1]
                        X_future["lag_7"] = y_train_update.iloc[-7:].mean()
                        X_future["ma_7"] = y_train_update.iloc[-7:].mean()
                        X_future["ma_30"] = y_train_update.iloc[-30:].mean()
                    elif freq == "M":
                        X_future["lag_1"] = y_train_update.iloc[-1]
                        X_future["lag_3"] = y_train_update.iloc[-3:].mean()
                        X_future["lag_6"] = y_train_update.iloc[-6:].mean()
                        X_future["lag_12"] = y_train_update.iloc[-12:].mean()
                        X_future["ma_3"] = y_train_update.iloc[-3:].mean()
                        X_future["ma_6"] = y_train_update.iloc[-6:].mean()
                        X_future["ma_12"] = y_train_update.iloc[-12:].mean()
                    elif freq == "Y":
                        X_future["lag_1"] = y_train_update.iloc[-1]
                        X_future["lag_2"] = y_train_update.iloc[-2:].mean()
                        X_future["lag_5"] = y_train_update.iloc[-5:].mean()
                        X_future["lag_10"] = y_train_update.iloc[-10:].mean()
                        X_future["ma_2"] = y_train_update.iloc[-2:].mean()
                        X_future["ma_5"] = y_train_update.iloc[-5:].mean()
                        X_future["ma_10"] = y_train_update.iloc[-10:].mean()

                return y_train_update[-future_periods:]

            # 逐次予測を実行
            forecast = sequential_forecast(df, model, selected_variable="cancel_user", freq=freq, future_periods=future_periods)

            # 予測結果を取得
            future_dates = pd.date_range(start=df_test["yyyymmdd"].max() + pd.DateOffset(days=1), periods=future_periods, freq=freq)
            future_pred = forecast.values
            # future_dates に基づく future_df を作成
            future_df = pd.DataFrame({
            "yyyymmdd": future_dates
        })
            # 未来の DataFrame を作成
            future_df = pd.DataFrame({"yyyymmdd": pd.to_datetime(future_dates)})
            #    特徴量作成と前処理
            future_df = preprocess_features(create_time_features(future_df, selected_variable, freq))


            # 特徴量の整合性を確保
            future_df = align_features(X_train, future_df)

            # 未来予測
            future_pred = model.predict(future_df)

            # 予測結果を表示
            st.subheader("📈 予測結果")
            st.write(pd.DataFrame({"yyyymmdd": future_dates, "Predicted": future_pred}))

            # グラフの描画
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(future_dates, future_pred, label="Forecast", marker="x")
            plt.xticks(rotation=45)
            plt.legend()
            st.pyplot(fig)
