import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import xgboost as xgb
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.feature_selection import RFECV

# Streamlit アプリのタイトル
st.title("📊 時系列予測")

# データのセッション状態を初期化（初回起動時）
if "df" not in st.session_state:
    st.session_state["df"] = None

# サイドバーにフェーズ選択のセレクトボックスを追加
phase = st.sidebar.selectbox("フェーズを選択してください", ["1.データのアップロード", "2.データ型の変更", "3.分析"])

if phase == "1.データのアップロード":
    st.write("### データのアップロード")
    uploaded_file = st.file_uploader("ファイルをアップロード", type=["csv", "xlsx", "txt", "json"])

    if uploaded_file is not None:
        file_extension = uploaded_file.name.split(".")[-1]

        try:
            if file_extension == "csv":
                df = pd.read_csv(uploaded_file, encoding="utf-8-sig")
            elif file_extension == "xlsx":
                xls = pd.ExcelFile(uploaded_file)
                sheet_name = st.selectbox("シートを選択してください", xls.sheet_names)
                df = pd.read_excel(uploaded_file, sheet_name=sheet_name)
            elif file_extension == "txt":
                delimiter = st.selectbox("区切り文字を選択してください", ["\t", " "])
                df = pd.read_csv(uploaded_file, delimiter=delimiter, encoding="utf-8-sig")
            elif file_extension == "json":
                df = pd.read_json(uploaded_file)
            else:
                st.error("対応していないファイル形式です。")
                st.stop()

            # 読み込んだデータをセッションに保存
            st.session_state["df"] = df
            st.success("✅ データの読み込み成功！")
        except Exception as e:
            st.error(f"❌ データの読み込みに失敗しました: {e}")

elif phase == "2.データ型の変更":
    st.subheader("データ型の変更")
    st.write("基本的には無視してください")
    df = st.session_state.get("df")

    if df is not None:
        for column in df.columns:
            dtype = st.selectbox(f"{column} のデータ型を選択してください", ["自動検出", "整数", "浮動小数点数", "文字列", "日付", "バイナリ"], key=column)
            if dtype == "整数":
                df[column] = pd.to_numeric(df[column], errors="coerce").astype("Int64")
            elif dtype == "浮動小数点数":
                df[column] = pd.to_numeric(df[column], errors="coerce")
            elif dtype == "文字列":
                df[column] = df[column].astype(str)
            elif dtype == "日付":
                df[column] = pd.to_datetime(df[column], errors="coerce")
            elif dtype == "バイナリ":
                df[column] = df[column].astype("bool")

        # 変更後のデータをセッションに保存
        st.session_state["df"] = df
    else:
        st.warning("⚠️ データが読み込まれていません。まずは1でデータをアップロードしてください。")

elif phase == "3.分析":
    df = st.session_state.get("df")

    if df is not None and "yyyymmdd" in df.columns:
        df["yyyymmdd"] = pd.to_datetime(df["yyyymmdd"], errors="coerce")
        df.dropna(subset=["yyyymmdd"], inplace=True)
        min_date, max_date = df["yyyymmdd"].min(), df["yyyymmdd"].max()

        # トレーニング期間とテスト期間の選択
        train_start, train_end = st.date_input(
            "📅 トレーニングデータの期間", 
            value=(min_date, max_date - pd.DateOffset(months=1)), 
            min_value=min_date, max_value=max_date
        )
        test_start, test_end = st.date_input(
            "📅 テストデータの期間", 
            value=(max_date - pd.DateOffset(months=1), max_date), 
            min_value=min_date, max_value=max_date
        )

        # データの分割
        df_train = df[(df["yyyymmdd"] >= pd.to_datetime(train_start)) & (df["yyyymmdd"] <= pd.to_datetime(train_end))]
        df_test = df[(df["yyyymmdd"] >= pd.to_datetime(test_start)) & (df["yyyymmdd"] <= pd.to_datetime(test_end))]

        # 予測対象変数の選択
        selected_variable = st.selectbox("📌 予測する変数を選択", df_train.select_dtypes(include=["number"]).columns)

        # 特徴量選択
        # 交差検証のセットを定義
        validation_sets = [...]  # 交差検証セットを指定

        # 特徴量選択のためのリストを作成    
        selected_features = []
        scores = []

        for i, (X_train_set, y_train_set, X_val_set, y_val_set) in enumerate(validation_sets):
            # RFECVで特徴量選択
            rfecv = RFECV(estimator=xgb.XGBRegressor(random_state=100),
                          min_features_to_select=11,
                          step=0.5,
                          n_jobs=1,
                          scoring='neg_mean_absolute_percentage_error')

            # 特徴量選択のフィット
            rfecv.fit(X_train_set, y_train_set)

            # 選ばれた特徴量をリストに追加
            columns_selected = X_train_set.columns[rfecv.support_].tolist()
            selected_features.append(columns_selected)
            print(f"バリデーションセット {i+1}: 特徴量の数: {rfecv.n_features_}")
            print(f"選択された特徴量: {columns_selected}")

            # 選択された特徴量を使ってX_trainとX_valを作成
            X_train_selected = X_train_set[columns_selected]
            X_val_selected = X_val_set[columns_selected]

            # XGBoostモデルを訓練
            model = xgb.XGBRegressor(random_state=99)
            model.fit(X_train_selected, y_train_set)

            # バリデーションセットで予測
            y_val_pred = model.predict(X_val_selected)


        # モデル学習
        try:
            model = xgb.XGBRegressor(objective="reg:squarederror", n_estimators=100, learning_rate=0.1)
            model.fit(df_train[selected_features], df_train[selected_variable])
            y_pred = model.predict(df_test[selected_features])

            st.subheader(f"📈 {selected_variable} の予測結果")

            # 予測結果の表示
            st.write("✅ テストデータのプレビュー", df_test.head())
            st.write("✅ 予測結果のプレビュー", y_pred[:5])

            if len(df_test) > 0 and len(y_pred) > 0:
                fig, ax = plt.subplots(figsize=(12, 6))
                ax.plot(df_test["yyyymmdd"], df_test[selected_variable], label="Actual", marker="o", color="blue")
                ax.plot(df_test["yyyymmdd"], y_pred, label="Predicted", marker="x", color="red")
                ax.set_title(f"{selected_variable} の予測結果")
                plt.xticks(rotation=45)
                plt.legend()
                st.pyplot(fig)

                # MAPEの計算と表示
                mape = mean_absolute_percentage_error(df_test[selected_variable], y_pred)
                st.write(f"✅ **MAPE**: {mape:.2f}%")

                # モデル精度の評価
                if mape <= 8.5:
                    st.success("✅ モデル精度は良好です。予測結果をダウンロードできます。")
                else:
                    st.error("⚠️ モデル精度が不足しています。データの見直しが必要です。")
            else:
                st.warning("⚠️ 予測結果またはテストデータが空です。データの範囲を確認してください。")

        except Exception as e:
            st.error(f"❌ モデル学習または予測中にエラーが発生しました: {e}")

    else:
        st.warning("⚠️ 'yyyymmdd' カラムが見つかりません。")


















# セッションステートの初期化
if "show_form" not in st.session_state:
    st.session_state["show_form"] = False
if "show_qa" not in st.session_state:
    st.session_state["show_qa"] = False

# サイドバーにボタンを設置
with st.sidebar:
    if st.button("Q&A"):
        st.session_state["show_qa"] = not st.session_state["show_qa"]

    if st.button("質問フォーム"):
        st.session_state["show_form"] = not st.session_state["show_form"]

    # Q&Aセクションを表示（ボタンが押されたときだけ）
    if st.session_state["show_qa"]:
        st.write("### よくある質問")
        st.write("**Q1: アップロードデータの期間の目安は？**")
        st.write("A1: 月次データの場合最低でも 3年分、年次データの場合は最低でも 20年分を推奨します。")
        
        st.write("**Q2: パスワードを忘れた場合は？**")
        st.write("A2: パスワードを忘れた場合は、ログインページの「パスワードを忘れた」リンクから再設定できます。")
        
        st.write("**Q3: お問い合わせ方法は？**")
        st.write("A3: 操作方法がわからない、正しく操作しているはずなのにエラーが出る、モデル精度がどうしても出ないなど、質問・ご相談がある方は以下連絡先に状況をご連絡ください。担当者より返信させていただきます。<br>問い合わせ先メールアドレス：contact@b-mystory.com<br>担当：作田、野本", unsafe_allow_html=True)

    # フォームを表示（ボタンが押されたときだけ）
    if st.session_state["show_form"]:
        st.write("### 質問")
        with st.form("user_form"):
            name = st.text_input("名前")
            email = st.text_input("メールアドレス")
            question = st.text_area("質問内容")
            submitted = st.form_submit_button("送信")

            if submitted:
                st.success(f"送信完了！\n名前: {name}, メール: {email}")










